#!/usr/bin/env python
# vim: set filetype=python

"""
Upstanding Server Management Support Tools

See README.md for more information.
"""


__version__ = '0.0.0'


#=============================================================================
def backup( args ):
    """
    Executes configured backups.

    @param args The argparse argument object
    @return     Shell exit status (0 on success)
    """

    ### ZIH

    return 0


#=============================================================================
def situp( args ):
    """
    Executes configured updates.

    @param args The argparse argument object
    @return     Shell exit status (0 on success)
    """

    ### ZIH

    return 0


#=============================================================================
def main( argv ):
    """
    Script execution entry point

    @param argv List of arguments passed to the script
    @return     Shell exit code (0 = success)
    """

    # imports when using this as a script
    import argparse

    # create and configure an argument parser
    parser = argparse.ArgumentParser(
        description = 'Upstanding Server Management Support Tools',
        add_help    = False
    )

    # typical help argument setup
    helpargs   = [ '-h', '--help' ]
    helpkwargs = {
        'default' : False,
        'help'    : 'Display this help message and exit.',
        'action'  : 'help'
    }

    # set up the root argument parser
    parser.add_argument( *helpargs, **helpkwargs )
    parser.add_argument(
        '-v',
        '--version',
        default = False,
        help    = 'Display script version and exit.',
        action  = 'version',
        version = __version__
    )
    parser.add_argument(
        '-t',
        '--test',
        default = False,
        help    = 'Execute inline tests.',
        action  = 'store_true'
    )

    # configure sub-command parsing
    subparsers = parser.add_subparsers(
        title = 'Tools',
        help  = 'The following tools are available.'
    )

    # set up the `back` command parser
    back_command = subparsers.add_parser(
        'back',
        description = 'Execute configured backups.',
        help        = 'Execute configured backups.',
        add_help    = False
    )
    back_command.add_argument( *helpargs, **helpkwargs )
    back_command.set_defaults( call = backup )

    # set up the `sit` command parser
    sit_command = subparsers.add_parser(
        'sit',
        description = 'Report configured statuses.',
        help        = 'Report configured statuses.',
        add_help    = False
    )
    sit_command.add_argument( *helpargs, **helpkwargs )
    sit_command.set_defaults( call = situp )

    # parse the arguments
    args = parser.parse_args( argv[ 1 : ] )

    # call the appropriate, arguments-aware function
    result = args.call( args )

    # return result of command
    return result


#=============================================================================
if __name__ == "__main__":
    import os
    import sys
    sys.exit( main( sys.argv ) )

