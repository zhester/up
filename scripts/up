#!/usr/bin/env python
# vim: set filetype=python

"""
Upstanding Server Management Support Tools

See README.md for more information.
"""


import logging
import os
import subprocess
import sys


# check for and set up development path
_pwd          = os.path.dirname( os.path.realpath( __file__ ) )
_dev_path     = os.path.dirname( _pwd )
_modules_path = os.path.join( _dev_path, 'up' )
if os.path.exists( _modules_path ):
    sys.path.append( _dev_path )

# up module imports
import up.conf


__version__ = '0.0.0'

#=============================================================================
# Module Variables

_rsync       = '/usr/local/bin/rsync'
_rsync_flags = [ '-Flrtvz', '--delete' ]
_rsync_extra = {
    'include' : [],
    'exclude' : [ '.git/', '.svn/' ],
    'filter'  : [ 'dir-merge,- .gitignore' ]
}

# -F : filter using .rsync-filter files
# -l : copy links as-is
# -n : dry run
# -r : recursive
# -t : maintain timestamps
# -v : be verbose on stdout
# -z : use compression


#=============================================================================
def backup( args, config ):
    """
    Executes configured backups.

    @param args   The argparse argument object
    @param config The system configuration object
    @return       Shell exit status (0 on success)
    """

    # check for a test command
    if args.test == True:

        # add a switch to perform a dry run
        _rsync_flags.append( '-n' )

    # set basic backup command arguments
    arguments = [ _rsync ] + _rsync_flags

    # add extra command arguments
    for flag, value in _rsync_extra.items():
        flag = '--' + flag
        if type( value ) is list:
            for item in value:
                arguments.extend( [ flag, item ] )
        elif type( value ) is str:
            arguments.extend( [ flag, value ] )
        elif ( type( value ) is bool ) and ( value == True ):
            arguments.append( flag )

    # iterate through each backup pair
    paths = config[ 'back' ][ 'paths' ]
    for pair in paths:

        # set the list of arguments for this rsync run
        sync_args = arguments + pair

        # log backup event header
        logging.info( '### Starting File Backup ###' )
        logging.info( '## Executing ##' )
        logging.info( subprocess.list2cmdline( sync_args ) )

        # setup and execute rsync for this source-target pair
        try:
            proc = subprocess.Popen(
                sync_args,
                stdout = subprocess.PIPE,
                stderr = subprocess.STDOUT
            )
            output, errors = proc.communicate()

        # error encountered
        except subprocess.CalledProcessError as error:
            logging.error( 'Error executing rsync: {}'.format( error.output ) )
            return 1

        # rsync finished with a 0 status
        else:

            # check for any output on stderr
            if errors is not None:
                logging.warning( '## rsync Errors ##' )
                logging.warning( errors )

            # log additional information from stdout
            logging.info( '## rsync Output ##' )
            logging.info( output )

    # indicate the backup was executed successfully
    return 0


#=============================================================================
def situp( args, config ):
    """
    Executes configured updates.

    @param args   The argparse argument object
    @param config The system configuration object
    @return       Shell exit status (0 on success)
    """

    ### ZIH

    return 0


#=============================================================================
def main( argv ):
    """
    Script execution entry point

    @param argv List of arguments passed to the script
    @return     Shell exit code (0 = success)
    """

    # imports when using this as a script
    import argparse

    # create and configure an argument parser
    parser = argparse.ArgumentParser(
        description = 'Upstanding Server Management Support Tools',
        add_help    = False
    )

    # typical help argument setup
    helpargs   = [ '-h', '--help' ]
    helpkwargs = {
        'default' : False,
        'help'    : 'Display this help message and exit.',
        'action'  : 'help'
    }

    # set up the root argument parser
    parser.add_argument(
        '-c',
        '--config',
        default = up.conf.confpath,
        help    = 'Override the default configuration path.'
    )
    parser.add_argument( *helpargs, **helpkwargs )
    parser.add_argument(
        '-t',
        '--test',
        default = False,
        help    = 'Execute inline tests.',
        action  = 'store_true'
    )
    parser.add_argument(
        '-v',
        '--version',
        default = False,
        help    = 'Display script version and exit.',
        action  = 'version',
        version = __version__
    )

    # configure sub-command parsing
    subparsers = parser.add_subparsers(
        title = 'Tools',
        help  = 'The following tools are available.'
    )

    # set up the `back` command parser
    back_command = subparsers.add_parser(
        'back',
        description = 'Execute configured backups.',
        help        = 'Execute configured backups.',
        add_help    = False
    )
    back_command.add_argument( *helpargs, **helpkwargs )
    back_command.add_argument(
        '-t',
        '--test',
        default = False,
        help    = 'Runs a "test" backup without synchronizing any files.',
        action  = 'store_true'
    )
    back_command.set_defaults( call = backup )

    # set up the `sit` command parser
    sit_command = subparsers.add_parser(
        'sit',
        description = 'Report configured statuses.',
        help        = 'Report configured statuses.',
        add_help    = False
    )
    sit_command.add_argument( *helpargs, **helpkwargs )
    sit_command.set_defaults( call = situp )

    # parse the arguments
    args = parser.parse_args( argv[ 1 : ] )

    # possibly override the config file path
    up.conf.confpath = args.config

    # load system configuration file
    try:
        config = up.conf.load_conf()
    except up.conf.FileError:
        print( 'Configuration file not found at {}'.format( up.conf.confpath ) )
        return 1
    except up.conf.ParseError:
        print( 'Unable to parse configuration file.' )
        return 1
    except up.conf.ValidError as ve:
        print( 'Configuration validity check failed: {}'.format( ve ) )
        return 1

    # determine the best log file path
    logfile = config[ 'up' ][ 'logfile' ]
    if os.access( os.path.dirname( logfile ), ( os.W_OK | os.X_OK ) ) == False:
        logfile = os.path.expanduser( '~/up.log' )

    # initialize the logging subsystem
    logging.basicConfig(
        filename = logfile,
        level    = logging.INFO,
        format   = '%(asctime)s :: %(levelname)s :: %(message)s',
        datefmt  = '%Y-%m-%d %H:%M:%S'
    )

    # call the appropriate function
    result = args.call( args, config )

    # return result of command
    return result


#=============================================================================
if __name__ == "__main__":
    sys.exit( main( sys.argv ) )

